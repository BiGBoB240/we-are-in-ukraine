document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('search');
    const searchResults = document.getElementById('search-results');
    const searchBar = document.getElementById('search');
    const postsContainer = document.getElementById('posts-container');


    let currentPage = 1;
    let currentFilter = 'date-new';

    let loadedPostIds = new Set(); // –î–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤

    // --- –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ –ø–æ—Å—Ç–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º URL ---
    const urlParams = new URLSearchParams(window.location.search);
    const postIdFromUrl = urlParams.get('post_id');
    const replyToFromUrl = urlParams.get('reply_to');
    // replyToFromUrl —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –±—É–¥—É—â–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    // –û—Ç–∫—Ä—ã–≤–∞—Ç—å –º–æ–¥–∞–ª–∫—É –ø–æ—Å—Ç–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤
    loadposts().then(() => {
        if (postIdFromUrl) {
            openPostModal(postIdFromUrl, replyToFromUrl || null);
        }
    });
    // –ï—Å–ª–∏ –Ω–µ—Ç post_id, –ø—Ä–æ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç—ã
    if (!postIdFromUrl) {
        loadposts();
    }

    // Create modal container
    const modalContainer = document.createElement('div');
    modalContainer.className = 'modal';
    modalContainer.innerHTML = `
        <div class="modal-content">
            <button class="modal-close">&times;</button>
            <div class="modal-body"></div>
        </div>
    `;
    document.body.appendChild(modalContainer);

    // Close modal on click outside or close button
    modalContainer.addEventListener('click', (e) => {
        if (e.target === modalContainer || e.target.classList.contains('modal-close')) {
            modalContainer.style.display = 'none';
        }
    });

    // Global variable to check if user is logged in
    let isLoggedIn = false;
    
    // Check login status
    fetch('api/check_login.php')
        .then(response => response.json())
        .then(data => {
            isLoggedIn = data.isLoggedIn;
        })
        .catch(error => {
            console.error('Error checking login status:', error);
        });
        


    // Search functionality
        // –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ—Å—Ç–æ–≤ –∏/–∏–ª–∏ –ø–æ–∏—Å–∫–∞, –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥
        if (searchInput && searchResults && searchBar ) {
        let searchTimeout;

        searchInput.addEventListener('input', function() {
        clearTimeout(searchTimeout);
        const query = this.value.trim();

    
        if (query.length > 0) {
            searchTimeout = setTimeout(() => {
                fetch(`api/search_bar.php?query=${encodeURIComponent(query)}`)
                    .then(response => response.json())
                    .then(data => {
                        searchResults.innerHTML = '';
                        searchResults.style.display = 'block';
                        searchBar.classList.add('no-bottom-radius');

                        data.forEach(item => {
                            if (item.type === 'post') {
                                const div = document.createElement('div');
                                div.className = 'search-result-item';
                                div.textContent = item.title;
                                div.addEventListener('click', () => {
                                    openPostModal(item.id);
                                });
                                searchResults.appendChild(div);
                            } else if (item.type === 'user') {
                                const div = document.createElement('div');
                                div.className = 'search-result-item user';
                                div.textContent = `üë§ ${item.username}`;
                                div.addEventListener('click', () => {
                                    window.location.href = `profile.php?id=${item.id}`;
                                });
                                searchResults.appendChild(div);
                            }
                        });
                    });
            }, 300);
        } else {
            searchResults.style.display = 'none';
            searchBar.classList.remove('no-bottom-radius');
        }
    });
};
    // Hide search results when clicking outside
    document.addEventListener('click', function(e) {
        if (!searchResults.contains(e.target) && e.target !== searchInput) {
            searchResults.style.display = 'none';
            searchBar.classList.remove('no-bottom-radius');
        }
    });

    // Load posts
    function loadposts() {
        return fetch(`api/posts.php?page=${currentPage}&filter=${currentFilter}`)
            .then(response => response.json())
            .then(data => {
                if (!data.posts || data.posts.length === 0) {
                    if (postsContainer) {
                    if (postsContainer.children.length === 0) {
                            postsContainer.innerHTML = '<div style="text-align:center;color:#888;margin:2rem;">–ü–æ—Å—Ç—ñ–≤ –Ω–µ–º–∞—î</div>';
                        }
                    }
                    return;
                }
                if (data.hasMore === false) {
                    hasMorePosts = false;
                }
                data.posts.forEach(post => {
                    if (loadedPostIds.has(post.id)) return; // –ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã
                    loadedPostIds.add(post.id);
                    const postElement = createPostElement(post);
                    if (postsContainer) {
                        postsContainer.appendChild(postElement);
                    }
                });
            });
    }

    // Create post element
    function createPostElement(post) {
        const filteredImages = post.images ? post.images.filter(img => img) : [];
        const postDiv = document.createElement('div');
        postDiv.className = 'post';
        postDiv.dataset.postId = post.id;
        postDiv.innerHTML = `
            <h2>${post.title}</h2>
            ${filteredImages.length > 0 ? createImageSlider(filteredImages, false) : ''}
            ${post.content ? `<div class="post-content">${post.content}</div>` : ''}
            <div class="post-footer">
                <div class="rating">
                    <span>‚ù§Ô∏è </span><span id="post-likes-${post.id}">${post.post_likes}</span>
                </div>
                <div class="date">${post.created_at}</div>
            </div>
        `;
        
        // Add click handlers for post and images
        postDiv.addEventListener('click', (e) => {
            if (!e.target.closest('.slider-prev') && !e.target.closest('.slider-next')) {
                openPostModal(post.id);
            }
        });

        // Initialize image slider if exists
        const slider = postDiv.querySelector('.image-slider');
        if (slider && filteredImages.length > 0) {
            initializeImageSlider(slider, filteredImages);
        }

        return postDiv;
    }

    // Create image slider
    function createImageSlider(images, isInModal = false) {
        if (images.length === 0) return '';
        return `
            <div class="image-slider">
                <img src="assets/upload/${images[0]}" alt="Post image" class="slider-main-img" data-is-modal="${isInModal}">
                ${images.length > 1 ? `
                    <button class="slider-prev" tabindex="-1">&lt;</button>
                    <button class="slider-next" tabindex="-1">&gt;</button>
                ` : ''}
            </div>
        `;
    }

    // Initialize image slider
    function initializeImageSlider(slider, images) {
        if (!slider) return;
        const mainImg = slider.querySelector('.slider-main-img');
        const prevBtn = slider.querySelector('.slider-prev');
        const nextBtn = slider.querySelector('.slider-next');
        let currentIndex = 0;

        function showImage(index) {
            mainImg.style.opacity = 0;
            setTimeout(() => {
                mainImg.src = `assets/upload/${images[index]}`;
                mainImg.style.opacity = 1;
            }, 200);
        }

        if (prevBtn && nextBtn) {
            prevBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                currentIndex = (currentIndex - 1 + images.length) % images.length;
                showImage(currentIndex);
            });
            nextBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                currentIndex = (currentIndex + 1) % images.length;
                showImage(currentIndex);
            });
        }

        // Add click handler only for modal images
        if (mainImg.dataset.isModal === 'true') {
            mainImg.addEventListener('click', () => {
                window.open(mainImg.src, '_blank');
            });
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        showImage(currentIndex);
    }

    // Open post modal
    window.openPostModal = function(postId, replyTo = null) {
        fetch(`api/post.php?id=${postId}`)
            .then(response => response.json())
            .then(post => {
                const filteredImages = post.images ? post.images.filter(img => img) : [];
                const modalBody = modalContainer.querySelector('.modal-body');
                modalBody.innerHTML = `
                    <h2>${post.title}</h2>
                    ${filteredImages.length > 0 ? createImageSlider(filteredImages, true) : ''}
                    ${post.content ? `<div class="post-content-box">${post.content}</div>` : ''}
                    ${isLoggedIn ? `
                        <div class="post-content-box">
                        ${window.isAdmin ? `<button class="buttons-style-one" id="modal-edit-post-btn" style="float:left; margin-right:10px;">–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ—Å—Ç</button>` : ''}
                        <button class="like-button${post.has_liked ? ' liked' : ''}" onclick="togglePostLike(${post.id}, this)">
                            <span class="like-icon">‚ù§Ô∏è</span> <span class="likes-count">${post.post_likes}</span>
                        </button>
                        <button class="report-btn" id="modal-report-post-btn" onclick="reportPost(${post.id})" style="float:right;">–ü–æ–±–∞—á–∏–ª–∏ –ø–æ–º–∏–ª–∫—É?</button>
                        </div>` : ''}
                    ${post.comments ? `
                        ${isLoggedIn || post.comments.length > 0 ? `
                        <div class="comment-section comment-section-box">
                            <h3>–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ</h3>` : ''}
                            ${isLoggedIn ? `
                                <form class="comment-form">
                                    <textarea placeholder="–î–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä..." maxlength="300"></textarea>
                                    <div style="display: flex; gap: 8px; align-items: center;">
                                        <button class="buttons-style-one" type="submit">–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏</button>
                                        <button class="buttons-style-one" type="button" id="cancel-reply-btn" style="display:none;">–°–∫–∞—Å—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å</button>
                                    </div>
                                </form>` : ''}
                            ${post.comments.map(comment => `
                                <div class="comment" data-comment-id="${comment.id}">
                                    <div class="comment-content">
                                        <strong>${comment.username}</strong>
                                        <p class="comment-text" id="comment-text-${comment.id}">${comment.comment_text}</p>
                                        <small>${comment.created_at}${comment.is_edited ? ' (–≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ)' : ''}</small>
                                        <button class="like-button ${comment.has_liked ? 'liked' : ''}" onclick="toggleCommentLike(${comment.id}, this)">
                                            <span class="like-icon">‚ù§Ô∏è</span>
                                            <span class="likes-count">${comment.likes_count}</span>
                                        </button>
                                        ${(isLoggedIn && Number(window.currentUserId) !== Number(comment.user_id)) ? `<button class="report-btn" title="–ü–æ—Å–∫–∞—Ä–∂–∏—Ç–∏—Å—å –Ω–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä" onclick="reportComment(${comment.id})">–ü–æ—Å–∫–∞—Ä–∂–∏—Ç–∏—Å—å</button>` : ''}
                                    </div>
                                    ${(isLoggedIn && Number(window.currentUserId) !== Number(comment.user_id)) ? `<button class="reply-btn buttons-style-one" data-reply-username="${comment.username}" data-reply-id="${comment.id}">–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É</button>` : ''}
                                    <div class="edit-form" id="edit-form-${comment.id}" style="display: none;">
                                        <textarea class="edit-textarea">${comment.comment_text}</textarea>
                                        <div class="edit-buttons">
                                            <button class="buttons-style-one" onclick="saveComment(${comment.id})">–ó–±–µ—Ä–µ–≥—Ç–∏</button>
                                            <button class="buttons-style-one" onclick="cancelEdit(${comment.id})">–°–∫–∞—Å—É–≤–∞—Ç–∏</button>
                                        </div>
                                    </div>
                                    ${comment.can_edit || comment.can_delete ? `
                                        <div class="comment-actions">
                                            ${comment.can_edit ? `<button class="buttons-style-one" onclick="editComment(${comment.id})">–†–µ–¥–∞–≥—É–≤–∞—Ç–∏</button>` : ''}
                                            ${comment.can_delete ? `<button class="buttons-style-one buttons-style-two" onclick="deleteComment(${comment.id})">–í–∏–¥–∞–ª–∏—Ç–∏</button>` : ''}
                                        </div>
                                    ` : ''}
                                </div>
                            `).join('')}
                        </div>
                    ` : ''}
                `;
                
                // Initialize slider in modal if exists
                const modalSlider = modalBody.querySelector('.image-slider');
                if (modalSlider) {
                    initializeImageSlider(modalSlider, filteredImages);
                }

                modalContainer.style.display = 'block';

                // –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª–∫–∏
                setTimeout(() => {
                    modalContainer.querySelector('.modal-content').classList.add('post-animate-in');
                }, 10);
                modalContainer.querySelector('.modal-content').addEventListener('animationend', () => {
                    modalContainer.querySelector('.modal-content').classList.remove('post-animate-in');
                }, { once: true });

                // –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—Ä–≥–∏ –Ω–∞ –ø–æ—Å—Ç –≤ –º–æ–¥–∞–ª—Ü—ñ
                const reportPostBtn = document.getElementById('modal-report-post-btn');
                if (reportPostBtn) {
                    reportPostBtn.addEventListener('click', function(e) {
                        e.stopPropagation();
                        customConfirm('–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É —É —Ü—å–æ–º—É –ø–æ—Å—Ç—ñ?').then(function(confirmed){
                            if (confirmed) {
                            fetch('api/report.php', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ content_id: post.id, content_type: 'post' })
                            })
                            .then(res => res.json())
                            .then(data => customAlert(data.success || data.error))
                            .catch(() => customAlert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'));
                        }
                    });
                });
                }

                // –ö–Ω–æ–ø–∫–∞ "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ—Å—Ç" –¥–ª—è –∞–¥–º—ñ–Ω–∞
                const editPostBtn = document.getElementById('modal-edit-post-btn');
                if (editPostBtn) {
                    editPostBtn.addEventListener('click', function(e) {
                        e.stopPropagation();
                        if (typeof window.editPostModal === 'function') {
                            window.editPostModal(post);
                        } else {
                            customAlert('–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ—Å—Ç.');
                        }
                    });
                }
                // –ì–ª–æ–±–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–∫–∞—Ä–≥–∏ –Ω–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —É –∫–Ω–æ–ø—Ü—ñ)
                window.reportComment = function(commentId) {
                    customConfirm('–ü–æ—Å–∫–∞—Ä–∂–∏—Ç–∏—Å—å –Ω–∞ —Ü–µ–π –∫–æ–º–µ–Ω—Ç–∞—Ä?').then(function(confirmed){
                        if (confirmed) {
                        fetch('api/report.php', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ content_id: commentId, content_type: 'comment' })
                        })
                        .then(res => res.json())
                        .then(data => customAlert(data.success || data.error))
                        .catch(() => customAlert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ —Å–∫–∞—Ä–≥–∏'));
                      }
                 });
                }
                
                // Handle reply-to-user logic
                const commentForm = modalBody.querySelector('.comment-form');
                if (commentForm) {
        const textarea = commentForm.querySelector('textarea');
        const replyBtns = modalBody.querySelectorAll('.reply-btn');
        const cancelReplyBtn = modalBody.querySelector('#cancel-reply-btn');
        // --- –ù–æ–≤—ã–π —Å—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º: –µ—Å–ª–∏ replyTo –µ—Å—Ç—å, –≥–æ—Ç–æ–≤–∏–º —Ñ–æ—Ä–º—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞ ---
        if (replyTo) {
            const commentBlock = modalBody.querySelector(`.comment[data-comment-id='${replyTo}']`);
            let replyToUsername = '';
            if (commentBlock) {
                // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
                commentBlock.scrollIntoView({behavior: 'smooth', block: 'center'});
                // –ü—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const strong = commentBlock.querySelector('.comment-content > strong');
                if (strong) replyToUsername = strong.textContent;
                // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º —á–µ—Ä–µ–∑ reply-btn
                if (!replyToUsername) {
                    const replyBtn = commentBlock.querySelector('.reply-btn');
                    if (replyBtn) replyToUsername = replyBtn.getAttribute('data-reply-username') || '';
                }
                // –ì–æ—Ç–æ–≤–∏–º —Ñ–æ—Ä–º—É
                textarea.placeholder = `–í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${replyToUsername}:`;
                textarea.focus();
                commentForm.classList.add('reply-mode');
                if (cancelReplyBtn) cancelReplyBtn.style.display = '';
                // replyTo –∏ replyToUsername –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
                commentForm._replyTo = replyTo;
                commentForm._replyToUsername = replyToUsername;
            }
        }

                    // Reply button logic
                    replyBtns.forEach(btn => {
                        btn.addEventListener('click', function(e) {
                            e.preventDefault();
                            commentForm._replyTo = this.getAttribute('data-reply-id');
                            commentForm._replyToUsername = this.getAttribute('data-reply-username');
                            textarea.placeholder = `–í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${commentForm._replyToUsername}:`;
                            textarea.focus();
                            commentForm.classList.add('reply-mode');
                            if (cancelReplyBtn) cancelReplyBtn.style.display = '';
                        });
                    });
                    // Cancel reply logic
                    if (cancelReplyBtn) {
                        cancelReplyBtn.addEventListener('click', function() {
                            commentForm._replyTo = null;
                            commentForm._replyToUsername = '';
                            textarea.placeholder = '–î–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä...';
                            commentForm.classList.remove('reply-mode');
                            cancelReplyBtn.style.display = 'none';
                        });
                    }

                    // Submission logic
                    commentForm.addEventListener('submit', function(e) {
                        e.preventDefault();
                        const text = textarea.value.trim();
                        if (!text) return;
                        let commentText = text;
                        let payload = { post_id: postId, comment_text: commentText };
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞
                        if (commentForm._replyTo && commentForm._replyToUsername) {
                            commentText = `–í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${commentForm._replyToUsername}: ${text}`;
                            payload = { post_id: postId, comment_text: commentText, reply_to: commentForm._replyTo };
                        }
                        fetch('api/create_comment.php', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(payload)
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                openPostModal(postId);
                            } else {
                                customAlert("–í–∏ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ" || '–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è');
                            }
                        })
                        .catch(err => console.error('Comment error:', err));
                        // Reset reply mode
                        commentForm._replyTo = null;
                        commentForm._replyToUsername = '';
                        textarea.placeholder = '–î–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä...';
                        commentForm.classList.remove('reply-mode');
                        if (cancelReplyBtn) cancelReplyBtn.style.display = 'none';
                    });
                    // Reset reply mode on modal close
                    modalContainer.querySelector('.modal-close').addEventListener('click', function() {
                        replyTo = null;
                        replyToUsername = '';
                        textarea.placeholder = '–î–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä...';
                        commentForm.classList.remove('reply-mode');
                        if (cancelReplyBtn) cancelReplyBtn.style.display = 'none';
                    });
                }
            });
    }

        // Toggle post like
        window.togglePostLike = function(postId, button) {
            fetch('api/toggle_post_like.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    post_id: postId
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∞–π–∫–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
                    const likesCount = button.querySelector('.likes-count');
                    if (likesCount) {
                        likesCount.textContent = data.likes_count;
                    }
                    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∞–π–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ –ø–æ—Å—Ç–∞ –≤ –ª–µ–Ω—Ç–µ
                    const cardLikes = document.getElementById(`post-likes-${postId}`);
                    if (cardLikes) {
                        cardLikes.textContent = data.likes_count;
                    }
                    if (data.action === 'liked') {
                        button.classList.add('liked');
                    } else {
                        button.classList.remove('liked');
                    }
                } else {
                    customAlert(data.error || '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ª–∞–π–∫—É');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                customAlert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ª–∞–π–∫—É');
            });
        };

    // Like functionality
    window.toggleCommentLike = function(commentId, button) {
        fetch('api/toggle_comment_like.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                comment_id: commentId
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const likesCount = button.querySelector('.likes-count');
                likesCount.textContent = data.likes_count;
                
                if (data.action === 'liked') {
                    button.classList.add('liked');
                } else {
                    button.classList.remove('liked');
                }
            } else {
                customAlert(data.error || '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ª–∞–π–∫—É');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            customAlert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ª–∞–π–∫—É');
        });
    };

    // Comment functions
    window.editComment = function(commentId) {
        const commentText = document.getElementById(`comment-text-${commentId}`);
        const editForm = document.getElementById(`edit-form-${commentId}`);
        
        if (commentText && editForm) {
            commentText.style.display = 'none';
            editForm.style.display = 'block';
        }
    };

    window.cancelEdit = function(commentId) {
        const commentText = document.getElementById(`comment-text-${commentId}`);
        const editForm = document.getElementById(`edit-form-${commentId}`);
        
        if (commentText && editForm) {
            commentText.style.display = 'block';
            editForm.style.display = 'none';
        }
    };

    window.saveComment = function(commentId, fromreports = false) {
        const editForm = document.getElementById(`edit-form-${commentId}`);
        const textarea = editForm.querySelector('.edit-textarea');
        const newText = textarea.value.trim();

        if (!newText) {
            customAlert('–ö–æ–º–µ–Ω—Ç–∞—Ä –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º');
            return;
        }

        if (newText.length > 300) {
            customAlert('–ö–æ–º–µ–Ω—Ç–∞—Ä –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–≤—à–∏–º –∑–∞ 300 —Å–∏–º–≤–æ–ª—ñ–≤');
            return;
        }

        fetch('api/update_comment.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                comment_id: commentId,
                text: newText
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                if (data.post_id && !fromreports) {
                    openPostModal(data.post_id);
                } else {
                    const commentText = document.getElementById(`comment-text-${commentId}`);
                    commentText.textContent = newText;
                    commentText.style.display = 'block';
                    editForm.style.display = 'none';
                }
            } else {
                customAlert(data.error || '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—è');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            customAlert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—è');
        });
    };

    window.deleteComment = function(commentId) {
        customConfirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –∫–æ–º–µ–Ω—Ç–∞—Ä?').then(function(confirmed){
            if (confirmed) {

            fetch('api/delete_comment.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    comment_id: commentId
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º –≤ –º–æ–¥–∞–ª–∫–µ –ø–æ—Å—Ç–∞ ‚Äî —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ modalBody
                    if (window.location.pathname.endsWith('profile.php')) {
                        // –ü—Ä–æ—Ñ–∏–ª—å: —É–¥–∞–ª—è—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ
                        const commentDiv = document.querySelector(`[data-comment-id="${commentId}"]`);
                        if (commentDiv) commentDiv.remove();
                    } else {
                        // –ü–æ—Å—Ç: —Ç–æ–ª—å–∫–æ –∏–∑ modalBody
                        const modalBody = modalContainer.querySelector('.modal-body');
                        if (modalBody) {
                            const commentDiv = modalBody.querySelector(`[data-comment-id="${commentId}"]`);
                            if (commentDiv) commentDiv.remove();
                        }
                    }
                } else {
                    customAlert(data.error || '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—è');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                customAlert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—è');
            });
        }
        });
    };

    // Filter buttons
    document.querySelectorAll('#filter-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            currentFilter = this.dataset.filter;
            currentPage = 1;
            postsContainer.innerHTML = '';
            loadedPostIds = new Set();
            autoLoadpostsUntilScrollable();
        });
    });

    // Infinite scroll: –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—Ç—ã –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –Ω–∏–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    let isLoadingposts = false;
let hasMorePosts = true; // –§–ª–∞–≥, —á—Ç–æ –µ—Å—Ç—å –µ—â–µ –ø–æ—Å—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    window.addEventListener('scroll', function() {
        if (isLoadingposts || !hasMorePosts) return;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±–ª–∏–∑–∫–æ –ª–∏ –Ω–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if ((window.innerHeight + window.scrollY) >= (document.body.offsetHeight - 200)) {
            isLoadingposts = true;
            currentPage++;
            loadposts().finally(() => {
                isLoadingposts = false;
            });
        }
    });

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ –Ω–∞ –±–æ–ª—å—à–∏—Ö —ç–∫—Ä–∞–Ω–∞—Ö
    let autoLoadInProgress = false;

    // Initial load
    autoLoadpostsUntilScrollable();

    // –ê–≤—Ç–æ–¥–æ–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–º–µ–Ω—å—à–∏–ª –º–∞—Å—à—Ç–∞–±)
    window.addEventListener('resize', function() {
        // –ï—Å–ª–∏ —Å–∫—Ä–æ–ª–ª–∞ –Ω–µ—Ç –∏ –∞–≤—Ç–æ–¥–æ–≥—Ä—É–∑–∫–∞ –Ω–µ –∏–¥—ë—Ç, –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–¥–æ–≥—Ä—É–∑–∫—É
        const enoughScroll = document.body.offsetHeight > window.innerHeight + 20;
        if (!enoughScroll && !autoLoadInProgress) {
            autoLoadpostsUntilScrollable();
        }
    });

    function autoLoadpostsUntilScrollable() {
        if (autoLoadInProgress || !hasMorePosts) return; // –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        autoLoadInProgress = true;
        let lastpostsCount = -1;
        let lastPage = currentPage;
        function tryLoad() {
            loadposts().then(() => {
                // –ï—Å–ª–∏ –ø–æ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–∏–±–∞–≤–∏–ª–æ—Å—å –∏–ª–∏ —Å–∫—Ä–æ–ª–ª –ø–æ—è–≤–∏–ª—Å—è ‚Äî –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º
                const enoughScroll = document.body.offsetHeight > window.innerHeight + 20;
                const postsCount = postsContainer ? postsContainer.children.length : 0;
                if (enoughScroll || postsCount === lastpostsCount) {
                    autoLoadInProgress = false;
                    return;
                }
                lastpostsCount = postsCount;
                // –ï—Å–ª–∏ –ø–æ—Å—Ç–æ–≤ –Ω–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ, –∑–Ω–∞—á–∏—Ç –ø–æ—Å—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
                if (postsCount === 0) {
                    autoLoadInProgress = false;
                    return;
                }
                // –ò–Ω–∞—á–µ –ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑
                currentPage++;
                setTimeout(tryLoad, 50);
            });
        }
        tryLoad();
    }
});

document.addEventListener('DOMContentLoaded', function() {
    // Create back to top button
    const backToTopButton = document.createElement('div');
    backToTopButton.className = 'back-to-top';
    backToTopButton.innerHTML = '&#8679;'; // Up arrow symbol
    backToTopButton.id = 'back-to-top';
    document.body.appendChild(backToTopButton);
    
    // Show/hide button based on scroll position
    window.addEventListener('scroll', function() {
        if (window.pageYOffset > 300) {
            backToTopButton.classList.add('visible');
        } else {
            backToTopButton.classList.remove('visible');
        }
    });
    
    // Scroll to top when button is clicked
    backToTopButton.addEventListener('click', function() {
        window.scrollTo({
            top: 0,
            behavior: 'smooth'
        });
    });
});
